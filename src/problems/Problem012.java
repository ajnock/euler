/**
 * 
 */
package problems;

import java.math.BigInteger;

import euler.EulerProblem;
import euler.SolvableProblem;
import euler.math.EulerMath;

/**
 * @author nock
 * 
 * 
 *         The sequence of triangle numbers is generated by adding the natural
 *         numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
 *         7 = 28. The first ten terms would be:
 * 
 *         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 *         Let us list the factors of the first seven triangle numbers:
 * 
 *         1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 *         1,2,4,7,14,28
 * 
 *         We can see that 28 is the first triangle number to have over five
 *         divisors.
 * 
 *         What is the value of the first triangle number to have over five
 *         hundred divisors?
 */
public class Problem012 extends EulerProblem implements SolvableProblem {

	/**
	 * 
	 */
	public Problem012() {
		// TODO Auto-generated constructor stub
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see euler.SolvableProblem#solve()
	 */
	@Override
	public Object solve() throws Exception {

		// BigInteger n = BigInteger.ONE;
		// int i = 2;
		// while (EulerMath.numDivisors(n) < 500) {
		// // if (i % 100 == 0)
		// System.out.println("#" + i + " => " + n.toString());
		// n = n.add(BigInteger.valueOf(i));
		// i++;
		// }

		long n = 1;
		for (long i = 2L; i < Long.MAX_VALUE; i++) {
			n += i;
			long d = EulerMath.numDivisors(n);
			if (d >= 500) {
				return Long.toString(d);
			} else if (i % 100L == 0) {
				System.out.println(String.format("T(%d) = %d => %d", i, n, d));
			}
		}

		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see euler.SolvableProblem#hasBeenSolved()
	 */
	@Override
	public boolean hasBeenSolved() {
		return false;
	}
}
