package problems.solved;

import euler.EulerProblem;
import euler.SolvableProblem;
import euler.math.FibonacciNumber;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 * @author nock
 * 
 */
public class Problem002 extends EulerProblem implements SolvableProblem {

	public Problem002() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public Object solve() throws Exception {
		FibonacciNumber f = new FibonacciNumber();
		long sum = 0;
		while (f.toInt() < 4e6) {
			if (f.toInt() % 2 == 0) {
				sum += f.toInt();
			}
			System.out.println(f);
			f.next();
		}
		return solution = Long.toString(sum);
	}

	@Override
	public boolean hasBeenSolved() {
		return true;
	}

}
